{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kishorereddy1529/Project/blob/main/Cricket%20Score%20Prediction%20Using%20Machine%20Learning\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import pickle\n",
        "\n",
        "# Load the datasets\n",
        "first_dataset = pd.read_csv(\"/content/IPL_Ball_by_Ball_2008_2022 (1).csv\")\n",
        "second_dataset = pd.read_csv(\"/content/IPL_Matches_2008_2022.csv\")\n",
        "\n",
        "# Calculate total runs for each match and innings\n",
        "total_runs = first_dataset.groupby(['ID', 'innings']).sum()['total_run'].reset_index()\n",
        "\n",
        "# Filter first innings\n",
        "total_runs = total_runs[total_runs['innings'] == 1]\n",
        "\n",
        "# Merge with second dataset\n",
        "match_df = second_dataset.merge(total_runs[['ID', 'total_run']], on='ID')\n",
        "\n",
        "# Standardize team names\n",
        "team_name_corrections = {\n",
        "    'Delhi Daredevils': 'Delhi Capitals',\n",
        "    'Deccan Chargers': 'Sunrisers Hyderabad',\n",
        "    'Kings XI Punjab': 'Punjab Kings'\n",
        "}\n",
        "\n",
        "match_df['Team1'] = match_df['Team1'].replace(team_name_corrections)\n",
        "match_df['Team2'] = match_df['Team2'].replace(team_name_corrections)\n",
        "\n",
        "# Filter specific teams\n",
        "teams = [\n",
        "    'Kolkata Knight Riders',\n",
        "    'Chennai Super Kings',\n",
        "    'Punjab Kings',\n",
        "    'Rajasthan Royals',\n",
        "    'Mumbai Indians',\n",
        "    'Delhi Capitals',\n",
        "    'Royal Challengers Bangalore',\n",
        "    'Sunrisers Hyderabad',\n",
        "    'Lucknow Super Giants',\n",
        "    'Gujarat Titans'\n",
        "]\n",
        "\n",
        "match_df = match_df[match_df['Team1'].isin(teams) & match_df['Team2'].isin(teams)]\n",
        "\n",
        "# Select relevant columns\n",
        "match_df = match_df[['ID', 'City', 'WinningTeam', 'total_run', 'Team1', 'Team2']]\n",
        "\n",
        "# Merge with first dataset to get second innings details\n",
        "second_innings = match_df.merge(first_dataset, on='ID')\n",
        "second_innings = second_innings[second_innings['innings'] == 2]\n",
        "\n",
        "# Standardize team names in second_innings\n",
        "second_innings['Team1'] = second_innings['Team1'].replace(team_name_corrections)\n",
        "second_innings['Team2'] = second_innings['Team2'].replace(team_name_corrections)\n",
        "\n",
        "# Determine the bowling team\n",
        "second_innings['BowlingTeam'] = second_innings.apply(lambda row: row['Team2'] if row['BattingTeam'] == row['Team1'] else row['Team1'], axis=1)\n",
        "\n",
        "# Calculate current score, runs left, and balls left\n",
        "second_innings['current_Score'] = second_innings.groupby('ID')['total_run_y'].cumsum()\n",
        "second_innings['runs_left'] = second_innings['total_run_x'] - second_innings['current_Score']\n",
        "second_innings['balls_left'] = 126 - (second_innings['overs'] * 6 + second_innings['ballnumber'])\n",
        "\n",
        "# Fill and convert player_out to integer\n",
        "second_innings['player_out'] = second_innings['player_out'].fillna(0).apply(lambda x: 0 if x == 0 else 1).astype(int)\n",
        "second_innings['wickets_remaining'] = 10 - second_innings.groupby('ID')['player_out'].cumsum()\n",
        "\n",
        "# Calculate crr and rrr\n",
        "second_innings['crr'] = round((second_innings['current_Score'] * 6) / (120 - second_innings['balls_left']), 2)\n",
        "second_innings['rrr'] = round((second_innings['runs_left'] * 6) / second_innings['balls_left'], 2)\n",
        "\n",
        "# Determine match results\n",
        "second_innings['results'] = second_innings.apply(lambda team: 1 if team['BattingTeam'] == team['WinningTeam'] else 0, axis=1)\n",
        "\n",
        "# Select required columns\n",
        "required_data = second_innings[['BattingTeam', 'BowlingTeam', 'City', 'runs_left', 'balls_left', 'wickets_remaining', 'total_run_x', 'crr', 'rrr', 'results']]\n",
        "\n",
        "# Clean data\n",
        "required_data = required_data.replace([np.inf, -np.inf], np.nan).dropna()\n",
        "required_data = required_data[(required_data[['runs_left', 'balls_left', 'wickets_remaining', 'total_run_x', 'crr', 'rrr', 'results']] >= 0).all(axis=1)]\n",
        "\n",
        "# Rename columns for consistency\n",
        "required_data.rename(columns={'BattingTeam': 'batting_team', 'BowlingTeam': 'bowling_team', 'City': 'city'}, inplace=True)\n",
        "\n",
        "# Check if additional data exists and integrate it\n",
        "additional_data_path = 'csv2023.csv'\n",
        "if os.path.exists(additional_data_path):\n",
        "    data = pd.read_csv(additional_data_path)\n",
        "    data.rename(columns={'max_total_run_x': 'total_run_x'}, inplace=True)\n",
        "    df = pd.concat([required_data, data], ignore_index=True)\n",
        "else:\n",
        "    df = required_data\n",
        "\n",
        "# Save the combined dataset\n",
        "df.to_csv('dataset.csv', index=False)\n",
        "\n",
        "# Split the data into features and target\n",
        "x = df.iloc[:, :-1]\n",
        "y = df.iloc[:, -1]\n",
        "\n",
        "# Train-test split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=100)\n",
        "\n",
        "# Column Transformer for OneHotEncoding\n",
        "trf = ColumnTransformer([\n",
        "    ('trf', OneHotEncoder(sparse=False, drop='first'), ['batting_team', 'bowling_team', 'city'])\n",
        "], remainder='passthrough')\n",
        "\n",
        "# Random Forest Classifier Pipeline\n",
        "ra_pipe = Pipeline([\n",
        "    ('step1', trf),\n",
        "    ('step2', RandomForestClassifier())\n",
        "])\n",
        "\n",
        "# Training the model\n",
        "ra_pipe.fit(x_train, y_train)\n",
        "\n",
        "# Making predictions\n",
        "ra_y_pred = ra_pipe.predict(x_test)\n",
        "\n",
        "# Evaluating the model\n",
        "accuracy = accuracy_score(y_test, ra_y_pred)\n",
        "print(f\"Model Accuracy: {accuracy}\")\n",
        "\n",
        "# Saving the model\n",
        "with open('ra_pipe.pkl', 'wb') as model_file:\n",
        "    pickle.dump(ra_pipe, model_file)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "67H7LtlEjwwu",
        "outputId": "36c098bd-312a-45ef-d434-742f47274610"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 0.9994425863991081\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.metrics import accuracy_score\n",
        "import pickle\n",
        "\n",
        "# Load the datasets\n",
        "first_dataset = pd.read_csv(\"/content/IPL_Ball_by_Ball_2008_2022 (1).csv\")\n",
        "second_dataset = pd.read_csv(\"/content/IPL_Matches_2008_2022.csv\")\n",
        "\n",
        "# Calculate total runs for each match and innings\n",
        "total_runs = first_dataset.groupby(['ID', 'innings']).sum()['total_run'].reset_index()\n",
        "\n",
        "# Filter first innings\n",
        "total_runs = total_runs[total_runs['innings'] == 1]\n",
        "\n",
        "# Merge with second dataset\n",
        "match_df = second_dataset.merge(total_runs[['ID', 'total_run']], on='ID')\n",
        "\n",
        "# Standardize team names\n",
        "team_name_corrections = {\n",
        "    'Delhi Daredevils': 'Delhi Capitals',\n",
        "    'Deccan Chargers': 'Sunrisers Hyderabad',\n",
        "    'Kings XI Punjab': 'Punjab Kings'\n",
        "}\n",
        "\n",
        "match_df['Team1'] = match_df['Team1'].replace(team_name_corrections)\n",
        "match_df['Team2'] = match_df['Team2'].replace(team_name_corrections)\n",
        "\n",
        "# Filter specific teams\n",
        "teams = [\n",
        "    'Kolkata Knight Riders',\n",
        "    'Chennai Super Kings',\n",
        "    'Punjab Kings',\n",
        "    'Rajasthan Royals',\n",
        "    'Mumbai Indians',\n",
        "    'Delhi Capitals',\n",
        "    'Royal Challengers Bangalore',\n",
        "    'Sunrisers Hyderabad',\n",
        "    'Lucknow Super Giants',\n",
        "    'Gujarat Titans'\n",
        "]\n",
        "\n",
        "match_df = match_df[match_df['Team1'].isin(teams) & match_df['Team2'].isin(teams)]\n",
        "\n",
        "# Select relevant columns\n",
        "match_df = match_df[['ID', 'City', 'WinningTeam', 'total_run', 'Team1', 'Team2']]\n",
        "\n",
        "# Merge with first dataset to get second innings details\n",
        "second_innings = match_df.merge(first_dataset, on='ID')\n",
        "second_innings = second_innings[second_innings['innings'] == 2]\n",
        "\n",
        "# Standardize team names in second_innings\n",
        "second_innings['Team1'] = second_innings['Team1'].replace(team_name_corrections)\n",
        "second_innings['Team2'] = second_innings['Team2'].replace(team_name_corrections)\n",
        "\n",
        "# Determine the bowling team\n",
        "second_innings['BowlingTeam'] = second_innings.apply(lambda row: row['Team2'] if row['BattingTeam'] == row['Team1'] else row['Team1'], axis=1)\n",
        "\n",
        "# Calculate current score, runs left, and balls left\n",
        "second_innings['current_Score'] = second_innings.groupby('ID')['total_run_y'].cumsum()\n",
        "second_innings['runs_left'] = second_innings['total_run_x'] - second_innings['current_Score']\n",
        "second_innings['balls_left'] = 126 - (second_innings['overs'] * 6 + second_innings['ballnumber'])\n",
        "\n",
        "# Fill and convert player_out to integer\n",
        "second_innings['player_out'] = second_innings['player_out'].fillna(0).apply(lambda x: 0 if x == 0 else 1).astype(int)\n",
        "second_innings['wickets_remaining'] = 10 - second_innings.groupby('ID')['player_out'].cumsum()\n",
        "\n",
        "# Calculate crr and rrr\n",
        "second_innings['crr'] = round((second_innings['current_Score'] * 6) / (120 - second_innings['balls_left']), 2)\n",
        "second_innings['rrr'] = round((second_innings['runs_left'] * 6) / second_innings['balls_left'], 2)\n",
        "\n",
        "# Determine match results\n",
        "second_innings['results'] = second_innings.apply(lambda team: 1 if team['BattingTeam'] == team['WinningTeam'] else 0, axis=1)\n",
        "\n",
        "# Select required columns\n",
        "required_data = second_innings[['BattingTeam', 'BowlingTeam', 'City', 'runs_left', 'balls_left', 'wickets_remaining', 'total_run_x', 'crr', 'rrr', 'results']]\n",
        "\n",
        "# Clean data\n",
        "required_data = required_data.replace([np.inf, -np.inf], np.nan).dropna()\n",
        "required_data = required_data[(required_data[['runs_left', 'balls_left', 'wickets_remaining', 'total_run_x', 'crr', 'rrr', 'results']] >= 0).all(axis=1)]\n",
        "\n",
        "# Rename columns for consistency\n",
        "required_data.rename(columns={'BattingTeam': 'batting_team', 'BowlingTeam': 'bowling_team', 'City': 'city'}, inplace=True)\n",
        "\n",
        "# Check if additional data exists and integrate it\n",
        "additional_data_path = 'csv2023.csv'\n",
        "if os.path.exists(additional_data_path):\n",
        "    data = pd.read_csv(additional_data_path)\n",
        "    data.rename(columns={'max_total_run_x': 'total_run_x'}, inplace=True)\n",
        "    df = pd.concat([required_data, data], ignore_index=True)\n",
        "else:\n",
        "    df = required_data\n",
        "\n",
        "# Save the combined dataset\n",
        "df.to_csv('dataset.csv', index=False)\n",
        "\n",
        "# Split the data into features and target\n",
        "x = df.iloc[:, :-1]\n",
        "y = df.iloc[:, -1]\n",
        "\n",
        "# Train-test split\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.25, random_state=100)\n",
        "\n",
        "# Column Transformer for OneHotEncoding\n",
        "trf = ColumnTransformer([\n",
        "    ('trf', OneHotEncoder(sparse=False, drop='first'), ['batting_team', 'bowling_team', 'city'])\n",
        "], remainder='passthrough')\n",
        "\n",
        "# Logistic Regression Pipeline\n",
        "lr_pipe = Pipeline([\n",
        "    ('step1', trf),\n",
        "    ('step2', LogisticRegression(solver='liblinear'))\n",
        "])\n",
        "\n",
        "# Training the model\n",
        "lr_pipe.fit(x_train, y_train)\n",
        "\n",
        "# Making predictions\n",
        "lr_y_pred = lr_pipe.predict(x_test)\n",
        "\n",
        "# Evaluating the model\n",
        "accuracy = accuracy_score(y_test, lr_y_pred)\n",
        "print(f\"Model Accuracy: {accuracy}\")\n",
        "\n",
        "# Saving the model\n",
        "with open('lr_pipe.pkl', 'wb') as model_file:\n",
        "    pickle.dump(lr_pipe, model_file)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BxaPLfM5k39K",
        "outputId": "d07aed41-678c-491c-8d59-0d09487b2fd8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Accuracy: 0.8235785953177257\n"
          ]
        }
      ]
    }
  ]
}